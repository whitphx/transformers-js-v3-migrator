import os
import shutil
import tempfile
from typing import Optional
from git import Repo
import logging


class GitOperations:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.temp_dir = None

    def clone_repo(self, repo_id: str) -> str:
        """Clone a repository from Hugging Face Hub"""
        self.temp_dir = tempfile.mkdtemp(prefix=f"transformersjs_migration_{repo_id.replace('/', '_')}_")
        repo_url = f"https://huggingface.co/{repo_id}"
        
        try:
            self.logger.info(f"Cloning {repo_url} to {self.temp_dir}")
            Repo.clone_from(repo_url, self.temp_dir)
            return self.temp_dir
        except Exception as e:
            self.logger.error(f"Failed to clone {repo_id}: {e}")
            self.cleanup_repo(self.temp_dir)
            raise

    def create_migration_pr(self, repo_path: str, repo_id: str):
        """Create a pull request with migration changes"""
        try:
            repo = Repo(repo_path)
            
            # Create new branch for migration
            branch_name = "transformersjs-v3-migration" 
            repo.git.checkout('-b', branch_name)
            
            # Stage all changes
            repo.git.add('.')
            
            # Commit changes
            commit_message = """Migrate to Transformers.js v3

This automated migration updates the model repository to be compatible with Transformers.js v3:
- Updated model configuration files
- Updated example code and documentation
- Maintained backward compatibility where possible

Generated by transformers-js-v3-migrator"""
            
            repo.index.commit(commit_message)
            
            # Push branch (would need proper authentication setup)
            self.logger.info(f"Would push branch {branch_name} and create PR for {repo_id}")
            # repo.git.push('origin', branch_name)
            
        except Exception as e:
            self.logger.error(f"Failed to create PR for {repo_id}: {e}")
            raise

    def cleanup_repo(self, repo_path: Optional[str]):
        """Clean up cloned repository"""
        if repo_path and os.path.exists(repo_path):
            try:
                shutil.rmtree(repo_path)
                self.logger.info(f"Cleaned up repository at {repo_path}")
            except Exception as e:
                self.logger.error(f"Failed to cleanup {repo_path}: {e}")