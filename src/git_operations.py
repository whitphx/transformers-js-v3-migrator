import os
import shutil
import tempfile
from typing import Optional, List
from huggingface_hub import HfApi, CommitOperationAdd, snapshot_download
import logging


class GitOperations:
    def __init__(self, token: Optional[str] = None):
        self.logger = logging.getLogger(__name__)
        self.temp_dir = None
        self.token = token
        self.hf_api = HfApi(token=token)

    def download_repo(self, repo_id: str) -> str:
        """Download a repository from Hugging Face Hub"""
        self.temp_dir = tempfile.mkdtemp(prefix=f"transformersjs_migration_{repo_id.replace('/', '_')}_")
        
        try:
            self.logger.info(f"Downloading {repo_id} to {self.temp_dir}")
            
            # Use HF Hub's snapshot_download to get repository files
            snapshot_download(
                repo_id=repo_id,
                local_dir=self.temp_dir,
                token=self.token,
                repo_type="model"
            )
            
            return self.temp_dir
        except Exception as e:
            self.logger.error(f"Failed to download {repo_id}: {e}")
            self.cleanup_repo(self.temp_dir)
            raise

    def upload_changes(self, repo_path: str, repo_id: str, migration_type_name: str, 
                      migration_title: str, migration_description: str, 
                      modified_files: List[str]) -> bool:
        """Upload changes to the repository using HF Hub API
        
        Returns:
            bool: True if successful, False otherwise
        """
        try:
            if not modified_files:
                self.logger.info(f"No files to upload for {repo_id}")
                return False
            
            # Create branch name for specific migration type
            branch_name = f"transformersjs-v3-{migration_type_name}"
            self.logger.info(f"Creating commit on branch {branch_name}")
            
            # Prepare commit operations for modified files
            operations = []
            for file_path in modified_files:
                local_file_path = os.path.join(repo_path, file_path)
                if os.path.exists(local_file_path):
                    operations.append(
                        CommitOperationAdd(
                            path_in_repo=file_path,
                            path_or_fileobj=local_file_path
                        )
                    )
                    self.logger.info(f"Prepared upload for {file_path}")
            
            if not operations:
                self.logger.info(f"No valid files to upload for {repo_id}")
                return False
            
            # Create commit message
            commit_message = f"""{migration_title}

{migration_description}

Generated by transformers-js-v3-migrator"""
            
            # Create commit on new branch
            commit_info = self.hf_api.create_commit(
                repo_id=repo_id,
                operations=operations,
                commit_message=commit_message,
                create_pr=False,  # We'll create PR separately
                revision=branch_name,
                repo_type="model",
                parent_commit=None  # Will use latest commit on main as parent
            )
            
            self.logger.info(f"Successfully uploaded changes to {repo_id} on branch {branch_name}")
            self.logger.info(f"Commit URL: {commit_info.commit_url}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to upload changes for {repo_id}: {e}")
            raise

    def create_pull_request(self, repo_id: str, pr_title: str, pr_description: str, 
                           migration_type_name: str) -> Optional[str]:
        """Create a pull request using HF Hub API
        
        Returns:
            str: PR URL if successful, None otherwise
        """
        try:
            branch_name = f"transformersjs-v3-{migration_type_name}"
            
            # Use create_commit with create_pr=True to create a pull request
            # We need to create an empty commit operation just to trigger PR creation
            # Since we already uploaded the files, we can use an empty operations list
            
            # Alternative approach: Create a discussion that references the branch
            discussion_description = f"""{pr_description}

**Branch:** `{branch_name}`
**Changes:** Please review the changes in the `{branch_name}` branch and merge if they look correct.

You can view the changes at: https://huggingface.co/{repo_id}/commit/{branch_name}"""

            discussion = self.hf_api.create_discussion(
                repo_id=repo_id,
                title=pr_title,
                description=discussion_description,
                repo_type="model"
            )
            
            pr_url = f"https://huggingface.co/{repo_id}/discussions/{discussion.num}"
            self.logger.info(f"Created discussion/PR: {pr_url}")
            
            return pr_url
            
        except Exception as e:
            self.logger.error(f"Failed to create PR for {repo_id}: {e}")
            # Return a fallback URL for manual PR creation
            return f"https://huggingface.co/{repo_id}/discussions/new"

    def cleanup_repo(self, repo_path: Optional[str]):
        """Clean up cloned repository"""
        if repo_path and os.path.exists(repo_path):
            try:
                shutil.rmtree(repo_path)
                self.logger.info(f"Cleaned up repository at {repo_path}")
            except Exception as e:
                self.logger.error(f"Failed to cleanup {repo_path}: {e}")